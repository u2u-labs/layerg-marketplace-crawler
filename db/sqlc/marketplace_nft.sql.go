// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: marketplace_nft.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const upsertNFT = `-- name: UpsertNFT :one
INSERT INTO "NFT" ("id", name, "createdAt", "updatedAt", status, "tokenUri", "txCreationHash",
                   "creatorId", "collectionId", image, description, "animationUrl",
                   "nameSlug", source, "ownerId", "slug", "totalSupply")
VALUES ($1, $2, $3, $4, $5, $6, $7,
        $8, $9, $10, $11, $12, $13,
        $14, $15, $16, $17)
ON CONFLICT ("id", "collectionId")
    DO UPDATE SET name           = EXCLUDED.name,
                  "updatedAt"    = CURRENT_TIMESTAMP,
                  status         = EXCLUDED.status,
                  "tokenUri"     = EXCLUDED."tokenUri",
                  image          = EXCLUDED.image,
                  description    = EXCLUDED.description,
                  "animationUrl" = EXCLUDED."animationUrl",
                  "ownerId"      = EXCLUDED."ownerId",
                  "nameSlug"     = EXCLUDED."nameSlug",
                  "slug"         = EXCLUDED."slug"
RETURNING id, name, "createdAt", "updatedAt", status, "tokenUri", "txCreationHash", "creatorId", "collectionId", image, "isActive", description, "animationUrl", "nameSlug", "metricPoint", "metricDetail", source, "ownerId", slug, "totalSupply"
`

type UpsertNFTParams struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	CreatedAt      time.Time      `json:"createdAt"`
	UpdatedAt      time.Time      `json:"updatedAt"`
	Status         string         `json:"status"`
	TokenUri       string         `json:"tokenUri"`
	TxCreationHash string         `json:"txCreationHash"`
	CreatorId      uuid.NullUUID  `json:"creatorId"`
	CollectionId   uuid.UUID      `json:"collectionId"`
	Image          sql.NullString `json:"image"`
	Description    sql.NullString `json:"description"`
	AnimationUrl   sql.NullString `json:"animationUrl"`
	NameSlug       sql.NullString `json:"nameSlug"`
	Source         sql.NullString `json:"source"`
	OwnerId        string         `json:"ownerId"`
	Slug           sql.NullString `json:"slug"`
	TotalSupply    sql.NullInt32  `json:"totalSupply"`
}

func (q *Queries) UpsertNFT(ctx context.Context, arg UpsertNFTParams) (NFT, error) {
	row := q.db.QueryRowContext(ctx, upsertNFT,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.TokenUri,
		arg.TxCreationHash,
		arg.CreatorId,
		arg.CollectionId,
		arg.Image,
		arg.Description,
		arg.AnimationUrl,
		arg.NameSlug,
		arg.Source,
		arg.OwnerId,
		arg.Slug,
		arg.TotalSupply,
	)
	var i NFT
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.TokenUri,
		&i.TxCreationHash,
		&i.CreatorId,
		&i.CollectionId,
		&i.Image,
		&i.IsActive,
		&i.Description,
		&i.AnimationUrl,
		&i.NameSlug,
		&i.MetricPoint,
		&i.MetricDetail,
		&i.Source,
		&i.OwnerId,
		&i.Slug,
		&i.TotalSupply,
	)
	return i, err
}
