// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chain.sql

package db

import (
	"context"
)

const addChain = `-- name: AddChain :exec
INSERT INTO chains (
    id, chain, name, rpc_url, chain_id,explorer, latest_block, block_time   
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, chain, name, rpc_url, chain_id, explorer, latest_block, block_time
`

type AddChainParams struct {
	ID          int32  `json:"id"`
	Chain       string `json:"chain"`
	Name        string `json:"name"`
	RpcUrl      string `json:"rpcUrl"`
	ChainID     int64  `json:"chainId"`
	Explorer    string `json:"explorer"`
	LatestBlock int64  `json:"latestBlock"`
	BlockTime   int32  `json:"blockTime"`
}

func (q *Queries) AddChain(ctx context.Context, arg AddChainParams) error {
	_, err := q.db.ExecContext(ctx, addChain,
		arg.ID,
		arg.Chain,
		arg.Name,
		arg.RpcUrl,
		arg.ChainID,
		arg.Explorer,
		arg.LatestBlock,
		arg.BlockTime,
	)
	return err
}

const getAllChain = `-- name: GetAllChain :many
SELECT id, chain, name, rpc_url, chain_id, explorer, latest_block, block_time FROM chains
`

func (q *Queries) GetAllChain(ctx context.Context) ([]Chain, error) {
	rows, err := q.db.QueryContext(ctx, getAllChain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chain
	for rows.Next() {
		var i Chain
		if err := rows.Scan(
			&i.ID,
			&i.Chain,
			&i.Name,
			&i.RpcUrl,
			&i.ChainID,
			&i.Explorer,
			&i.LatestBlock,
			&i.BlockTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainById = `-- name: GetChainById :one
SELECT id, chain, name, rpc_url, chain_id, explorer, latest_block, block_time FROM chains WHERE id = $1
`

func (q *Queries) GetChainById(ctx context.Context, id int32) (Chain, error) {
	row := q.db.QueryRowContext(ctx, getChainById, id)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Chain,
		&i.Name,
		&i.RpcUrl,
		&i.ChainID,
		&i.Explorer,
		&i.LatestBlock,
		&i.BlockTime,
	)
	return i, err
}

const updateChainLatestBlock = `-- name: UpdateChainLatestBlock :exec
UPDATE chains
SET
    latest_block = $2
WHERE
    id = $1
`

type UpdateChainLatestBlockParams struct {
	ID          int32 `json:"id"`
	LatestBlock int64 `json:"latestBlock"`
}

func (q *Queries) UpdateChainLatestBlock(ctx context.Context, arg UpdateChainLatestBlockParams) error {
	_, err := q.db.ExecContext(ctx, updateChainLatestBlock, arg.ID, arg.LatestBlock)
	return err
}
