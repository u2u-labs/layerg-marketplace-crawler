// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createApp = `-- name: CreateApp :exec
INSERT INTO apps (
    name, secret_key
    )
VALUES (
    $1, $2
) RETURNING id, name, secret_key
`

type CreateAppParams struct {
	Name      string `json:"name"`
	SecretKey string `json:"secretKey"`
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) error {
	_, err := q.db.ExecContext(ctx, createApp, arg.Name, arg.SecretKey)
	return err
}

const getAllApp = `-- name: GetAllApp :many
SELECT id, name, secret_key FROM apps
`

func (q *Queries) GetAllApp(ctx context.Context) ([]App, error) {
	rows, err := q.db.QueryContext(ctx, getAllApp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(&i.ID, &i.Name, &i.SecretKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppById = `-- name: GetAppById :one
SELECT id, name, secret_key FROM apps WHERE id = $1
`

func (q *Queries) GetAppById(ctx context.Context, id uuid.UUID) (App, error) {
	row := q.db.QueryRowContext(ctx, getAppById, id)
	var i App
	err := row.Scan(&i.ID, &i.Name, &i.SecretKey)
	return i, err
}
