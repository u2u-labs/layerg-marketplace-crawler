// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collection.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getCollectionByAddressAndChainId = `-- name: GetCollectionByAddressAndChainId :one
SELECT id, "txCreationHash", name, "nameSlug", symbol, description, address, "shortUrl", metadata, "isU2U", status, type, "createdAt", "updatedAt", "coverImage", avatar, "projectId", "isVerified", "floorPrice", floor, "floorWei", "isActive", "flagExtend", "isSync", "subgraphUrl", "lastTimeSync", "metricPoint", "metricDetail", "metadataJson", "gameLayergId", source, vol, "volumeWei", "chainId", "totalAssets"
FROM "Collection"
WHERE "address" ILIKE $1
  AND "chainId" = $2
`

type GetCollectionByAddressAndChainIdParams struct {
	Address sql.NullString `json:"address"`
	ChainId int64          `json:"chainId"`
}

func (q *Queries) GetCollectionByAddressAndChainId(ctx context.Context, arg GetCollectionByAddressAndChainIdParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollectionByAddressAndChainId, arg.Address, arg.ChainId)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.TxCreationHash,
		&i.Name,
		&i.NameSlug,
		&i.Symbol,
		&i.Description,
		&i.Address,
		&i.ShortUrl,
		&i.Metadata,
		&i.IsU2U,
		&i.Status,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverImage,
		&i.Avatar,
		&i.ProjectId,
		&i.IsVerified,
		&i.FloorPrice,
		&i.Floor,
		&i.FloorWei,
		&i.IsActive,
		&i.FlagExtend,
		&i.IsSync,
		&i.SubgraphUrl,
		&i.LastTimeSync,
		&i.MetricPoint,
		&i.MetricDetail,
		&i.MetadataJson,
		&i.GameLayergId,
		&i.Source,
		&i.Vol,
		&i.VolumeWei,
		&i.ChainId,
		&i.TotalAssets,
	)
	return i, err
}

const getCollectionById = `-- name: GetCollectionById :one
SELECT id, "txCreationHash", name, "nameSlug", symbol, description, address, "shortUrl", metadata, "isU2U", status, type, "createdAt", "updatedAt", "coverImage", avatar, "projectId", "isVerified", "floorPrice", floor, "floorWei", "isActive", "flagExtend", "isSync", "subgraphUrl", "lastTimeSync", "metricPoint", "metricDetail", "metadataJson", "gameLayergId", source, vol, "volumeWei", "chainId", "totalAssets"
FROM "Collection"
WHERE "id" = $1
`

func (q *Queries) GetCollectionById(ctx context.Context, id uuid.UUID) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollectionById, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.TxCreationHash,
		&i.Name,
		&i.NameSlug,
		&i.Symbol,
		&i.Description,
		&i.Address,
		&i.ShortUrl,
		&i.Metadata,
		&i.IsU2U,
		&i.Status,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverImage,
		&i.Avatar,
		&i.ProjectId,
		&i.IsVerified,
		&i.FloorPrice,
		&i.Floor,
		&i.FloorWei,
		&i.IsActive,
		&i.FlagExtend,
		&i.IsSync,
		&i.SubgraphUrl,
		&i.LastTimeSync,
		&i.MetricPoint,
		&i.MetricDetail,
		&i.MetadataJson,
		&i.GameLayergId,
		&i.Source,
		&i.Vol,
		&i.VolumeWei,
		&i.ChainId,
		&i.TotalAssets,
	)
	return i, err
}

const updateCollectionVolume = `-- name: UpdateCollectionVolume :one
UPDATE "Collection"
SET vol = $1, "volumeWei" = $2
WHERE "id" = $3
RETURNING id, "txCreationHash", name, "nameSlug", symbol, description, address, "shortUrl", metadata, "isU2U", status, type, "createdAt", "updatedAt", "coverImage", avatar, "projectId", "isVerified", "floorPrice", floor, "floorWei", "isActive", "flagExtend", "isSync", "subgraphUrl", "lastTimeSync", "metricPoint", "metricDetail", "metadataJson", "gameLayergId", source, vol, "volumeWei", "chainId", "totalAssets"
`

type UpdateCollectionVolumeParams struct {
	Vol       float64   `json:"vol"`
	VolumeWei string    `json:"volumeWei"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCollectionVolume(ctx context.Context, arg UpdateCollectionVolumeParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, updateCollectionVolume, arg.Vol, arg.VolumeWei, arg.ID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.TxCreationHash,
		&i.Name,
		&i.NameSlug,
		&i.Symbol,
		&i.Description,
		&i.Address,
		&i.ShortUrl,
		&i.Metadata,
		&i.IsU2U,
		&i.Status,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverImage,
		&i.Avatar,
		&i.ProjectId,
		&i.IsVerified,
		&i.FloorPrice,
		&i.Floor,
		&i.FloorWei,
		&i.IsActive,
		&i.FlagExtend,
		&i.IsSync,
		&i.SubgraphUrl,
		&i.LastTimeSync,
		&i.MetricPoint,
		&i.MetricDetail,
		&i.MetadataJson,
		&i.GameLayergId,
		&i.Source,
		&i.Vol,
		&i.VolumeWei,
		&i.ChainId,
		&i.TotalAssets,
	)
	return i, err
}
