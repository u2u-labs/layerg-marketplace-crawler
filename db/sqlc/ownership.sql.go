// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ownership.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteOwnership = `-- name: DeleteOwnership :exec
DELETE FROM "Ownership"
WHERE "userAddress" = $1 AND "nftId" = $2 AND "collectionId" = $3
`

type DeleteOwnershipParams struct {
	UserAddress  string         `json:"userAddress"`
	NftId        sql.NullString `json:"nftId"`
	CollectionId uuid.NullUUID  `json:"collectionId"`
}

func (q *Queries) DeleteOwnership(ctx context.Context, arg DeleteOwnershipParams) error {
	_, err := q.db.ExecContext(ctx, deleteOwnership, arg.UserAddress, arg.NftId, arg.CollectionId)
	return err
}

const getOwnershipByUserAddressAndCollectionId = `-- name: GetOwnershipByUserAddressAndCollectionId :one
SELECT id, "userAddress", "nftId", "collectionId", quantity, "createdAt", "updatedAt", "chainId" FROM "Ownership"
WHERE "userAddress" ILIKE $1 AND "collectionId" = $2 AND "nftId" = $3
`

type GetOwnershipByUserAddressAndCollectionIdParams struct {
	UserAddress  string         `json:"userAddress"`
	CollectionId uuid.NullUUID  `json:"collectionId"`
	NftId        sql.NullString `json:"nftId"`
}

func (q *Queries) GetOwnershipByUserAddressAndCollectionId(ctx context.Context, arg GetOwnershipByUserAddressAndCollectionIdParams) (Ownership, error) {
	row := q.db.QueryRowContext(ctx, getOwnershipByUserAddressAndCollectionId, arg.UserAddress, arg.CollectionId, arg.NftId)
	var i Ownership
	err := row.Scan(
		&i.ID,
		&i.UserAddress,
		&i.NftId,
		&i.CollectionId,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChainId,
	)
	return i, err
}

const upsertOwnership = `-- name: UpsertOwnership :one
INSERT INTO "Ownership"
    ("id", "userAddress", "nftId", "collectionId", "quantity", "createdAt", "updatedAt", "chainId")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT ("userAddress", "nftId", "collectionId")
    DO UPDATE
    SET "quantity"  = $5,
        "updatedAt" = COALESCE($7, now())
RETURNING id, "userAddress", "nftId", "collectionId", quantity, "createdAt", "updatedAt", "chainId"
`

type UpsertOwnershipParams struct {
	ID           string         `json:"id"`
	UserAddress  string         `json:"userAddress"`
	NftId        sql.NullString `json:"nftId"`
	CollectionId uuid.NullUUID  `json:"collectionId"`
	Quantity     int32          `json:"quantity"`
	CreatedAt    time.Time      `json:"createdAt"`
	UpdatedAt    sql.NullTime   `json:"updatedAt"`
	ChainId      int32          `json:"chainId"`
}

func (q *Queries) UpsertOwnership(ctx context.Context, arg UpsertOwnershipParams) (Ownership, error) {
	row := q.db.QueryRowContext(ctx, upsertOwnership,
		arg.ID,
		arg.UserAddress,
		arg.NftId,
		arg.CollectionId,
		arg.Quantity,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ChainId,
	)
	var i Ownership
	err := row.Scan(
		&i.ID,
		&i.UserAddress,
		&i.NftId,
		&i.CollectionId,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChainId,
	)
	return i, err
}
