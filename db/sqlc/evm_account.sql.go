// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: evm_account.sql

package db

import (
	"context"
)

const getEvmAccountByAddress = `-- name: GetEvmAccountByAddress :one
SELECT id, address, on_sale_count, holding_count, created_at, updated_at FROM evm_account WHERE address ILIKE $1
`

func (q *Queries) GetEvmAccountByAddress(ctx context.Context, address string) (EvmAccount, error) {
	row := q.db.QueryRowContext(ctx, getEvmAccountByAddress, address)
	var i EvmAccount
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.OnSaleCount,
		&i.HoldingCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEvmAccounts = `-- name: GetEvmAccounts :many
SELECT id, address, on_sale_count, holding_count, created_at, updated_at FROM evm_account
LIMIT $1 OFFSET $2
`

type GetEvmAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetEvmAccounts(ctx context.Context, arg GetEvmAccountsParams) ([]EvmAccount, error) {
	rows, err := q.db.QueryContext(ctx, getEvmAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvmAccount
	for rows.Next() {
		var i EvmAccount
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.OnSaleCount,
			&i.HoldingCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrCreateEvmAccount = `-- name: GetOrCreateEvmAccount :one
INSERT INTO evm_account (address, on_sale_count, holding_count)
SELECT
    $1,
    0,
    0
WHERE NOT EXISTS (
    SELECT 1 FROM evm_account
    WHERE address ILIKE $1
)
RETURNING id, address, on_sale_count, holding_count, created_at, updated_at
`

func (q *Queries) GetOrCreateEvmAccount(ctx context.Context, address string) (EvmAccount, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateEvmAccount, address)
	var i EvmAccount
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.OnSaleCount,
		&i.HoldingCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalEvmAccounts = `-- name: GetTotalEvmAccounts :one
SELECT COUNT(*) FROM evm_account
`

func (q *Queries) GetTotalEvmAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalEvmAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}
