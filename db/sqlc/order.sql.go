// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getOrderBySignature = `-- name: GetOrderBySignature :one
SELECT index, sig, "makerId", "makeAssetType", "makeAssetAddress", "makeAssetValue", "makeAssetId", "takerId", "takeAssetType", "takeAssetAddress", "takeAssetValue", "takeAssetId", salt, start, "end", "orderStatus", "orderType", root, proof, "tokenId", "collectionId", quantity, price, "priceNum", "netPrice", "netPriceNum", "createdAt", "updatedAt", "quoteToken", "filledQty" FROM "Order" WHERE "sig" = $1 AND "index" = $2
`

type GetOrderBySignatureParams struct {
	Sig   string `json:"sig"`
	Index int32  `json:"index"`
}

func (q *Queries) GetOrderBySignature(ctx context.Context, arg GetOrderBySignatureParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderBySignature, arg.Sig, arg.Index)
	var i Order
	err := row.Scan(
		&i.Index,
		&i.Sig,
		&i.MakerId,
		&i.MakeAssetType,
		&i.MakeAssetAddress,
		&i.MakeAssetValue,
		&i.MakeAssetId,
		&i.TakerId,
		&i.TakeAssetType,
		&i.TakeAssetAddress,
		&i.TakeAssetValue,
		&i.TakeAssetId,
		&i.Salt,
		&i.Start,
		&i.End,
		&i.OrderStatus,
		&i.OrderType,
		&i.Root,
		pq.Array(&i.Proof),
		&i.TokenId,
		&i.CollectionId,
		&i.Quantity,
		&i.Price,
		&i.PriceNum,
		&i.NetPrice,
		&i.NetPriceNum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QuoteToken,
		&i.FilledQty,
	)
	return i, err
}
