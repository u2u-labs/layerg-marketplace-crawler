// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getOrderBySignature = `-- name: GetOrderBySignature :one
SELECT "Order".index, "Order".sig, "Order"."makerId", "Order"."makeAssetType", "Order"."makeAssetAddress", "Order"."makeAssetValue", "Order"."makeAssetId", "Order"."takerId", "Order"."takeAssetType", "Order"."takeAssetAddress", "Order"."takeAssetValue", "Order"."takeAssetId", "Order".salt, "Order".start, "Order"."end", "Order"."orderStatus", "Order"."orderType", "Order".root, "Order".proof, "Order"."tokenId", "Order"."collectionId", "Order".quantity, "Order".price, "Order"."priceNum", "Order"."netPrice", "Order"."netPriceNum", "Order"."createdAt", "Order"."updatedAt", "Order"."quoteToken", "Order"."filledQty", maker.signer AS makerSigner, taker.signer AS takerSigner
FROM "Order"
    INNER JOIN "User" maker ON "Order"."makerId" = maker."id"
    LEFT JOIN "User" taker ON "Order"."takerId" = taker."id"
WHERE "sig" = $1 AND "index" = $2
`

type GetOrderBySignatureParams struct {
	Sig   string `json:"sig"`
	Index int32  `json:"index"`
}

type GetOrderBySignatureRow struct {
	Index            int32          `json:"index"`
	Sig              string         `json:"sig"`
	MakerId          uuid.UUID      `json:"makerId"`
	MakeAssetType    int32          `json:"makeAssetType"`
	MakeAssetAddress string         `json:"makeAssetAddress"`
	MakeAssetValue   string         `json:"makeAssetValue"`
	MakeAssetId      string         `json:"makeAssetId"`
	TakerId          uuid.NullUUID  `json:"takerId"`
	TakeAssetType    int32          `json:"takeAssetType"`
	TakeAssetAddress string         `json:"takeAssetAddress"`
	TakeAssetValue   string         `json:"takeAssetValue"`
	TakeAssetId      string         `json:"takeAssetId"`
	Salt             string         `json:"salt"`
	Start            int32          `json:"start"`
	End              int32          `json:"end"`
	OrderStatus      string         `json:"orderStatus"`
	OrderType        string         `json:"orderType"`
	Root             string         `json:"root"`
	Proof            []string       `json:"proof"`
	TokenId          string         `json:"tokenId"`
	CollectionId     uuid.UUID      `json:"collectionId"`
	Quantity         int32          `json:"quantity"`
	Price            string         `json:"price"`
	PriceNum         float64        `json:"priceNum"`
	NetPrice         string         `json:"netPrice"`
	NetPriceNum      float64        `json:"netPriceNum"`
	CreatedAt        time.Time      `json:"createdAt"`
	UpdatedAt        sql.NullTime   `json:"updatedAt"`
	QuoteToken       string         `json:"quoteToken"`
	FilledQty        int32          `json:"filledQty"`
	Makersigner      string         `json:"makersigner"`
	Takersigner      sql.NullString `json:"takersigner"`
}

func (q *Queries) GetOrderBySignature(ctx context.Context, arg GetOrderBySignatureParams) (GetOrderBySignatureRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderBySignature, arg.Sig, arg.Index)
	var i GetOrderBySignatureRow
	err := row.Scan(
		&i.Index,
		&i.Sig,
		&i.MakerId,
		&i.MakeAssetType,
		&i.MakeAssetAddress,
		&i.MakeAssetValue,
		&i.MakeAssetId,
		&i.TakerId,
		&i.TakeAssetType,
		&i.TakeAssetAddress,
		&i.TakeAssetValue,
		&i.TakeAssetId,
		&i.Salt,
		&i.Start,
		&i.End,
		&i.OrderStatus,
		&i.OrderType,
		&i.Root,
		pq.Array(&i.Proof),
		&i.TokenId,
		&i.CollectionId,
		&i.Quantity,
		&i.Price,
		&i.PriceNum,
		&i.NetPrice,
		&i.NetPriceNum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QuoteToken,
		&i.FilledQty,
		&i.Makersigner,
		&i.Takersigner,
	)
	return i, err
}
