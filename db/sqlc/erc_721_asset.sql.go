// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: erc_721_asset.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const add721Asset = `-- name: Add721Asset :one
INSERT INTO
    erc_721_collection_assets (asset_id, chain_id, token_id, owner, attributes)
VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT ON CONSTRAINT UC_ERC721 DO UPDATE SET
    owner = $4,
    attributes = $5
RETURNING id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at
`

type Add721AssetParams struct {
	AssetID    string         `json:"assetId"`
	ChainID    int32          `json:"chainId"`
	TokenID    string         `json:"tokenId"`
	Owner      string         `json:"owner"`
	Attributes sql.NullString `json:"attributes"`
}

func (q *Queries) Add721Asset(ctx context.Context, arg Add721AssetParams) (Erc721CollectionAsset, error) {
	row := q.db.QueryRowContext(ctx, add721Asset,
		arg.AssetID,
		arg.ChainID,
		arg.TokenID,
		arg.Owner,
		arg.Attributes,
	)
	var i Erc721CollectionAsset
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.AssetID,
		&i.TokenID,
		&i.Owner,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const count721AssetByAssetId = `-- name: Count721AssetByAssetId :one
SELECT COUNT(*) FROM erc_721_collection_assets 
WHERE asset_id = $1
`

func (q *Queries) Count721AssetByAssetId(ctx context.Context, assetID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, count721AssetByAssetId, assetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const count721AssetByOwnerAddress = `-- name: Count721AssetByOwnerAddress :one
SELECT COUNT(*) FROM erc_721_collection_assets 
WHERE owner = $1
`

func (q *Queries) Count721AssetByOwnerAddress(ctx context.Context, owner string) (int64, error) {
	row := q.db.QueryRowContext(ctx, count721AssetByOwnerAddress, owner)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const count721AssetHolderByAssetId = `-- name: Count721AssetHolderByAssetId :one
SELECT COUNT(DISTINCT(owner)) FROM erc_721_collection_assets 
WHERE asset_id = $1
`

func (q *Queries) Count721AssetHolderByAssetId(ctx context.Context, assetID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, count721AssetHolderByAssetId, assetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const delete721Asset = `-- name: Delete721Asset :exec
DELETE 
FROM erc_721_collection_assets
WHERE
    id = $1
`

func (q *Queries) Delete721Asset(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delete721Asset, id)
	return err
}

const delete721AssetByAssetId = `-- name: Delete721AssetByAssetId :exec
DELETE
FROM erc_721_collection_assets
WHERE
    asset_id = $1
`

func (q *Queries) Delete721AssetByAssetId(ctx context.Context, assetID string) error {
	_, err := q.db.ExecContext(ctx, delete721AssetByAssetId, assetID)
	return err
}

const get721AssetByAssetIdAndTokenId = `-- name: Get721AssetByAssetIdAndTokenId :one
SELECT id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at FROM erc_721_collection_assets
WHERE
    asset_id = $1
    AND token_id = $2
`

type Get721AssetByAssetIdAndTokenIdParams struct {
	AssetID string `json:"assetId"`
	TokenID string `json:"tokenId"`
}

func (q *Queries) Get721AssetByAssetIdAndTokenId(ctx context.Context, arg Get721AssetByAssetIdAndTokenIdParams) (Erc721CollectionAsset, error) {
	row := q.db.QueryRowContext(ctx, get721AssetByAssetIdAndTokenId, arg.AssetID, arg.TokenID)
	var i Erc721CollectionAsset
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.AssetID,
		&i.TokenID,
		&i.Owner,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaginated721AssetByAssetId = `-- name: GetPaginated721AssetByAssetId :many
SELECT id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at FROM erc_721_collection_assets 
WHERE asset_id = $1
LIMIT $2 OFFSET $3
`

type GetPaginated721AssetByAssetIdParams struct {
	AssetID string `json:"assetId"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetPaginated721AssetByAssetId(ctx context.Context, arg GetPaginated721AssetByAssetIdParams) ([]Erc721CollectionAsset, error) {
	rows, err := q.db.QueryContext(ctx, getPaginated721AssetByAssetId, arg.AssetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Erc721CollectionAsset
	for rows.Next() {
		var i Erc721CollectionAsset
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.AssetID,
			&i.TokenID,
			&i.Owner,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginated721AssetByOwnerAddress = `-- name: GetPaginated721AssetByOwnerAddress :many
SELECT id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at FROM erc_721_collection_assets
WHERE
    owner = $1
LIMIT $2 OFFSET $3
`

type GetPaginated721AssetByOwnerAddressParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetPaginated721AssetByOwnerAddress(ctx context.Context, arg GetPaginated721AssetByOwnerAddressParams) ([]Erc721CollectionAsset, error) {
	rows, err := q.db.QueryContext(ctx, getPaginated721AssetByOwnerAddress, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Erc721CollectionAsset
	for rows.Next() {
		var i Erc721CollectionAsset
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.AssetID,
			&i.TokenID,
			&i.Owner,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update721Asset = `-- name: Update721Asset :exec
UPDATE erc_721_collection_assets
SET
    owner = $2 
WHERE 
    id = $1
`

type Update721AssetParams struct {
	ID    uuid.UUID `json:"id"`
	Owner string    `json:"owner"`
}

func (q *Queries) Update721Asset(ctx context.Context, arg Update721AssetParams) error {
	_, err := q.db.ExecContext(ctx, update721Asset, arg.ID, arg.Owner)
	return err
}
