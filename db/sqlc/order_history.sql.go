// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_history.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkOrderHistoryExists = `-- name: CheckOrderHistoryExists :one
SELECT EXISTS (
    SELECT 1
    FROM "OrderHistory"
    WHERE sig = $1 AND index = $2
) AS exists
`

type CheckOrderHistoryExistsParams struct {
	Sig   string `json:"sig"`
	Index int32  `json:"index"`
}

func (q *Queries) CheckOrderHistoryExists(ctx context.Context, arg CheckOrderHistoryExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkOrderHistoryExists, arg.Sig, arg.Index)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createOrderHistory = `-- name: CreateOrderHistory :exec
INSERT INTO "OrderHistory" (id, index, sig, nonce, "fromId", "toId", "qtyMatch", price, "priceNum", timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateOrderHistoryParams struct {
	ID        uuid.UUID      `json:"id"`
	Index     int32          `json:"index"`
	Sig       string         `json:"sig"`
	Nonce     sql.NullString `json:"nonce"`
	FromId    uuid.UUID      `json:"fromId"`
	ToId      uuid.UUID      `json:"toId"`
	QtyMatch  int32          `json:"qtyMatch"`
	Price     string         `json:"price"`
	PriceNum  float64        `json:"priceNum"`
	Timestamp int32          `json:"timestamp"`
}

func (q *Queries) CreateOrderHistory(ctx context.Context, arg CreateOrderHistoryParams) error {
	_, err := q.db.ExecContext(ctx, createOrderHistory,
		arg.ID,
		arg.Index,
		arg.Sig,
		arg.Nonce,
		arg.FromId,
		arg.ToId,
		arg.QtyMatch,
		arg.Price,
		arg.PriceNum,
		arg.Timestamp,
	)
	return err
}
